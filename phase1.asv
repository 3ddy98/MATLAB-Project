function answer = phase1(a,b,h,E,v,q0,x0,y0,P,selection)

switch(selection)
    case 1 %square
        if q~= 0
            %deflection distributed rectangular
            series_multiplier_distributed= (16*q0)/(pi^6*D);
            total_function_summed = 0;
            [X,Y] = meshgrid(x,y);
            for m= 1:2:19
              for n = 1:2:19

                total_function_summed = total_function_summed + (series_multiplier_distributed).*(sin((m.*pi.*X)./a).*sin((n.*pi.*Y)./b))./((m.*n).*((m.^2./a.^2)+(n.^2./b.^2)).^2);

              end
            end
            max_distributed_rectangular = max(max(total_function_summed));
            disp(s)
            contour(X,Y,total_function_summed)
            xlabel('x - pos (in)')
            ylabel('y - pos (in)')
            zlabel('Deflection (in)')
        end
        
        if P ~= 0
            %deflection point rectangular
            [X,Y] = meshgrid(x,y);
            Z = 0;
            for m = 1:1:10
                for n = 1:1:10
                    Z = Z + ((4*P)/((pi^4)*a*b*D)).*(((sin((m.*pi.*x0)./a).*sin((n.*pi.*y0)./b))./(((m^2/a^2)+(n^2/b^2))^2)).*sin((m.*pi.*X)./a).*sin((n.*pi.*Y)./b));
                end
            end
            max_point_rectangular = max(max(Z));
            disp(s)
            surf(X,Y,Z)
            xlabel('x - pos (in)')
            ylabel('in')
            zlabel('in')

        end
        
        if q~=0 && P~=0
            D=(E*h^3)/(12*(1-v^2));

[X,Y] = meshgrid(x,y);
Z = 0;
for m = 1:1:10
    for n = 1:1:10
        Z = Z + ((4*P)/((pi^4)*a*b*D)).*(((sin((m.*pi.*x0)./a).*sin((n.*pi.*y0)./b))./(((m^2/a^2)+(n^2/b^2))^2)).*sin((m.*pi.*X)./a).*sin((n.*pi.*Y)./b));
    end
end
%s = max(max(Z));
%disp(s)
series_multiplier_distributed= (16*q0)/(pi^6*D);
total_function_summed = 0;

for m= 1:2:19
  for n = 1:2:19

    total_function_summed = total_function_summed + (series_multiplier_distributed).*(sin((m.*pi.*X)./a).*sin((n.*pi.*Y)./b))./((m.*n).*((m.^2./a.^2)+(n.^2./b.^2)).^2);

  end
end
both_sum = total_function_summed + Z;
max_both_rectagular = max(max(both_sum));
disp(max_both_distributed_rectangular)

%-------Graphing-------%
contour(X,Y,both_sum)
xlabel('x - pos (in)')
ylabel('y - pos (in)')
zlabel('Deflection (in)')

        end
        
    case 2  %circular
        if 
    otherwise %other
        
        end
end
